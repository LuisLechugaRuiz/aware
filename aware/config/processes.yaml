# We just need to specify name of the prompt - tool class to register it as an internal process for each agent.
thought_generator: ThoughtGeneratorTools
context_manager: ContextManagerTools
data_storage_manager: DataStorageManagerTools




# And then we should have agents.yaml:
# name used to retrieve prompst
  # name: name used to identify the agent.
  # main tools: tools used by the agent.
  # run_remote (if the tools are executed remote, i.e: running inside computer to get files or save them.)


assistant:
  name: Assistant

class ThoughtGenerator(Process):
    def __init__(self, chat_id: str, user_id: str):
        super().__init__(
            user_id=user_id,
            chat_id=chat_id,
            agent_name="Thought Generator",
            run_remote=False,
            tools=ThoughtGeneratorTools(user_id=user_id, chat_id=chat_id),
            module_name="system",
        )

    @classmethod
    def get_process_name(self):
        return "thought_generator"

name: thought_generator


assistant:
  model:
    type: openai
    name: gpt-4-1106-preview
executor:
  model:
    type: openai
    name: gpt-4-1106-preview
user_context_manager:
  model:
    type: openai
    name: gpt-4-1106-preview
user_thought_generator:
  model:
    type: openai
    name: gpt-4-1106-preview
user_data_storage_manager:
  model:
    type: openai
    name: gpt-4-1106-preview
# TODO: Fix creator based on latest improvements.
tool_creator:
  model:
    type: openai
    name: gpt-4-1106-preview